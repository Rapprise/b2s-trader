/*
 * Copyright (c) 2020, Rapprise.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef AUTO_TRADER_MACD_UT_H
#define AUTO_TRADER_MACD_UT_H

#include <vector>

#include "common/market_data.h"

namespace auto_trader {
namespace strategies {
namespace unit_test {

const std::vector<common::MarketData> macdToSell = {
    {8844.869, 8875.596, 8844.869, 8875.596, 1.10}, {8871.163, 8872.056, 8853.640, 8867.619, 1.74},
    {8864.386, 8865.143, 8812.102, 8815.745, 4.68}, {8815.745, 8815.745, 8802.032, 8815.744, 0.26},
    {8815.744, 8815.744, 8802.001, 8815.744, 1.75}, {8815.744, 8840.365, 8815.744, 8837.762, 16.1},
    {8841.008, 8847.895, 8835.987, 8840.232, 0.58}, {8834.109, 8860.000, 8831.886, 8860.000, 0.10},
    {8855.459, 8859.691, 8845.000, 8845.000, 1.17}, {8845.380, 8845.380, 8833.000, 8833.000, 2.76},
    {8834.103, 8838.507, 8810.000, 8818.409, 4.58}, {8818.410, 8844.586, 8813.731, 8835.392, 0.37},
    {8835.391, 8849.999, 8831.571, 8846.640, 0.87}, {8846.411, 8850.000, 8837.959, 8840.357, 1.32},
    {8843.610, 8866.704, 8840.299, 8861.998, 1.96}, {8862.642, 8866.161, 8850.000, 8850.000, 1.04},
    {8850.001, 8850.001, 8767.296, 8824.387, 10.4}, {8822.347, 8825.561, 8799.848, 8799.848, 3.68},
    {8803.432, 8809.253, 8775.750, 8809.253, 4.80}, {8798.511, 8820.381, 8760.001, 8760.001, 7.21},
    {8760.000, 8775.452, 8735.399, 8752.203, 15.4}, {8741.117, 8775.451, 8741.117, 8756.139, 2.84},
    {8764.745, 8787.640, 8759.224, 8768.526, 7.70}, {8768.526, 8785.280, 8766.322, 8785.280, 5.39},
    {8785.525, 8795.799, 8767.674, 8767.674, 20.4}, {8774.289, 8778.956, 8768.165, 8778.216, 2.42},
    {8778.216, 8779.419, 8768.833, 8768.833, 6.72}, {8768.833, 8787.006, 8768.833, 8787.006, 8.90},
    {8785.579, 8795.980, 8779.950, 8782.082, 7.22}, {8782.082, 8796.930, 8776.842, 8796.930, 1.76},
    {8796.930, 8808.970, 8796.930, 8808.970, 2.12}, {8806.052, 8817.340, 8789.760, 8798.999, 1.00},
    {8799.979, 8820.358, 8791.040, 8802.003, 2.22}, {8803.577, 8829.942, 8803.577, 8815.106, 1.62},
    {8821.538, 8821.538, 8804.099, 8804.099, 1.48}, {8804.618, 8808.982, 8794.515, 8798.973, 0.64},
    {8798.973, 8810.080, 8789.759, 8789.759, 6.82}, {8779.519, 8792.679, 8772.733, 8777.035, 9.63},
    {8776.262, 8787.451, 8774.701, 8784.040, 0.39}, {8784.039, 8789.922, 8768.833, 8769.306, 8.55},
    {8785.610, 8791.465, 8768.832, 8770.300, 1.32}};

const std::vector<common::MarketData> macdToBuySignal = {
    {8685.551, 8706.140, 8678.291, 8678.292, 10.97},
    {8677.274, 8678.090, 8657.753, 8677.170, 10.80},
    {8672.925, 8685.690, 8653.921, 8671.400, 4.849},
    {8672.168, 8676.720, 8637.973, 8637.973, 7.561},
    {8641.377, 8646.000, 8596.404, 8596.405, 16.32},
    {8596.404, 8610.474, 8566.000, 8591.809, 10.85},
    {8580.061, 8610.472, 8570.211, 8610.472, 5.650},
    {8610.473, 8620.000, 8603.817, 8614.663, 2.008},
    {8606.263, 8620.000, 8606.263, 8620.000, 0.516},
    {8619.999, 8620.000, 8602.310, 8609.580, 1.294},
    {8609.312, 8609.312, 8589.589, 8592.165, 2.628},
    {8601.157, 8615.711, 8590.488, 8615.711, 3.634},
    {8606.703, 8611.508, 8584.583, 8590.336, 10.11},
    {8587.717, 8609.038, 8584.572, 8588.540, 2.901},
    {8596.496, 8608.452, 8592.395, 8603.372, 2.123},
    {8611.509, 8671.940, 8611.509, 8649.071, 5.131},
    {8649.071, 8660.199, 8646.340, 8648.946, 4.465},
    {8641.297, 8648.700, 8634.282, 8641.431, 1.670},
    {8626.283, 8626.283, 8600.001, 8600.548, 5.123},
    {8600.000, 8614.000, 8600.000, 8611.630, 3.914},
    {8614.472, 8636.085, 8606.244, 8636.085, 2.917},
    {8628.291, 8640.000, 8613.562, 8640.000, 4.734},
    {8640.839, 8647.845, 8640.001, 8643.569, 2.226},
    {8645.000, 8651.217, 8645.000, 8645.000, 2.433},
    {8645.000, 8650.900, 8622.311, 8622.311, 2.864},
    {8626.269, 8636.510, 8621.957, 8636.480, 2.413},
    {8636.479, 8640.739, 8628.874, 8639.020, 8.824},
    {8635.050, 8636.896, 8622.016, 8631.931, 4.146},
    {8631.931, 8657.060, 8631.931, 8657.060, 4.260},
    {8644.314, 8664.610, 8636.089, 8658.614, 3.674},
    {8653.224, 8663.420, 8640.810, 8649.185, 4.135},
    {8654.572, 8662.811, 8650.087, 8656.119, 1.865},
    {8656.119, 8656.488, 8639.877, 8652.701, 7.351},
    {8652.699, 8666.416, 8642.342, 8649.652, 3.747},
    {8655.466, 8670.253, 8655.466, 8660.160, 4.152},
    {8660.128, 8663.784, 8636.677, 8641.080, 5.493},
    {8635.334, 8645.843, 8626.939, 8628.879, 3.391},
    {8625.320, 8625.320, 8601.153, 8601.153, 5.196},
    {8597.523, 8604.164, 8573.870, 8594.570, 1.236},
    {8594.570, 8610.390, 8520.000, 8532.163, 37.16},
    {8523.586, 8555.100, 8512.591, 8515.315, 16.96},
    {8533.018, 8538.499, 8520.315, 8530.270, 5.962},
    {8526.807, 8551.118, 8501.600, 8538.354, 6.006},
    {8536.297, 8553.538, 8532.878, 8532.879, 8.209},
    {8532.879, 8542.499, 8520.226, 8541.546, 2.287},
    {8538.201, 8551.437, 8538.200, 8547.494, 3.836},
    {8544.936, 8545.430, 8534.557, 8543.240, 4.701},
    {8544.845, 8556.340, 8541.947, 8554.339, 7.717},
    {8554.620, 8585.601, 8547.664, 8568.393, 2.044},
    {8566.525, 8575.669, 8564.495, 8571.140, 1.286}};

common::MarketData additionalCandleForBuy = {8570.653, 8571.920, 8551.230, 8558.808, 2.04};

const std::vector<common::MarketData> macdCandlesForNotCorrectLinesSize = {
    {8685.551, 8706.140, 8678.291, 8678.292, 10.97},
    {8677.274, 8678.090, 8657.753, 8677.170, 10.80},
    {8672.925, 8685.690, 8653.921, 8671.400, 4.849},
    {8672.168, 8676.720, 8637.973, 8637.973, 7.561},
    {8641.377, 8646.000, 8596.404, 8596.405, 16.32},
    {8596.404, 8610.474, 8566.000, 8591.809, 10.85},
    {8580.061, 8610.472, 8570.211, 8610.472, 5.650},
    {8610.473, 8620.000, 8603.817, 8614.663, 2.008},
    {8606.263, 8620.000, 8606.263, 8620.000, 0.516},
    {8619.999, 8620.000, 8602.310, 8609.580, 1.294},
    {8609.312, 8609.312, 8589.589, 8592.165, 2.628},
    {8601.157, 8615.711, 8590.488, 8615.711, 3.634},
    {8606.703, 8611.508, 8584.583, 8590.336, 10.11},
    {8587.717, 8609.038, 8584.572, 8588.540, 2.901},
    {8596.496, 8608.452, 8592.395, 8603.372, 2.123},
    {8611.509, 8671.940, 8611.509, 8649.071, 5.131},
    {8649.071, 8660.199, 8646.340, 8648.946, 4.465},
    {8641.297, 8648.700, 8634.282, 8641.431, 1.670},
    {8656.119, 8656.488, 8639.877, 8652.701, 7.351},
    {8652.699, 8666.416, 8642.342, 8649.652, 3.747},
    {8655.466, 8670.253, 8655.466, 8660.160, 4.152},
    {8660.128, 8663.784, 8636.677, 8641.080, 5.493},
    {8635.334, 8645.843, 8626.939, 8628.879, 3.391},
    {8625.320, 8625.320, 8601.153, 8601.153, 5.196},
    {8597.523, 8604.164, 8573.870, 8594.570, 1.236},
    {8523.586, 8555.100, 8512.591, 8515.315, 16.96},
    {8533.018, 8538.499, 8520.315, 8530.270, 5.962},
    {8526.807, 8551.118, 8501.600, 8538.354, 6.006}};
}  // namespace unit_test
}  // namespace strategies
}  // namespace auto_trader

#endif  // AUTO_TRADER_MACD_UT_H
