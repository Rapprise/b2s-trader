/*
 * Copyright (c) 2020, Rapprise.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef AUTO_TRADER_BOLLINGER_BANDS_STRATEGY_UT_H
#define AUTO_TRADER_BOLLINGER_BANDS_STRATEGY_UT_H

#include <vector>

#include "common/market_data.h"

namespace auto_trader {
namespace strategies {
namespace unit_test {

std::vector<common::MarketData> fiveCandles = {
    {6581.000, 6506.870, 6450.0, 6581.000, 824.000},
    {6502.885, 6145.360, 6049.999, 6502.885, 2610.000},
    {6120.000, 6200.889, 6050.000, 6242.660, 2150.000},
    {6190.000, 6186.000, 6170.042, 6238.590, 611.000},
    {6186.000, 6205.000, 6178.560, 6249.559, 133.000},
};

std::vector<common::MarketData> tenCandles = {{6410.500, 6400.000, 6360.000, 6433.310, 1170.000},
                                              {6542.000, 6547.306, 6483.010, 6590.000, 523.000},
                                              {6575.000, 6512.690, 6537.730, 6660.000, 734.000},
                                              {6602.001, 6581.000, 6550.000, 6622.140, 1200.000},
                                              {6581.000, 6506.870, 6450.000, 6581.000, 824.000},
                                              {6502.885, 6145.360, 6049.999, 6502.885, 2610.000},
                                              {6120.000, 6200.889, 6050.000, 6242.660, 2150.000},
                                              {6190.000, 6186.000, 6170.042, 6238.590, 611.000},
                                              {6186.000, 6146.790, 6120.000, 6249.559, 398.000},
                                              {6139.155, 6426.000, 6120.001, 6600.001, 5200.000}};

std::vector<common::MarketData> twentyCandles = {{6329.240, 6329.240, 6329.240, 6329.240, 9.596},
                                                 {6345.000, 6345.294, 6345.000, 6345.294, 74.606},
                                                 {6345.294, 6345.294, 6345.294, 6345.294, 99.0},
                                                 {6329.170, 6340.0, 6329.170, 6340.0, 199.503},
                                                 {6333.030, 6333.030, 6333.030, 6333.030, 2280},
                                                 {6335.900, 6335.900, 6335.900, 6335.900, 7.331},
                                                 {6334.510, 6334.510, 6334.510, 6334.510, 9.800},
                                                 {6339.000, 6339.000, 6339.000, 6339.000, 223.726},
                                                 {6339.000, 6339.000, 6339.000, 6339.000, 25.681},
                                                 {6340.000, 6351.335, 6340.000, 6351.335, 6400},
                                                 {6351.335, 6351.335, 6351.335, 6351.335, 13.674},
                                                 {6351.335, 6340.000, 6340.000, 6351.335, 3160},
                                                 {6353.240, 6353.240, 6353.240, 6353.240, 58.130},
                                                 {6340.000, 6340.000, 6340.000, 6340.000, 109.420},
                                                 {6340.000, 6340.000, 6340.000, 6340.000, 65.680},
                                                 {6339.000, 6339.000, 6339.000, 6339.000, 6.834},
                                                 {6340.000, 6340.000, 6340.000, 6340.000, 9.738},
                                                 {6339.000, 6333.560, 6333.560, 6339.000, 1010},
                                                 {6339.650, 6339.650, 6339.650, 6339.650, 261.778},
                                                 {6354.293, 6364.000, 6354.293, 6364.000, 79800}};

double expected_top = 6510.2930327426693;
double expected_middle = 6248.8238000000001;
double expected_bottom = 5987.3545672573309;

int bbLinesAndAllCandlesDifference = 4;

std::vector<common::MarketData> candlesToSellTrue = {
    {3965.966, 3968.760, 3965.794, 3969.690, 40000},
    {3966.014, 3962.254, 3957.629, 3966.014, 6710},
    {3965.163, 3966.599, 3965.157, 3967.178, 18300},
    {3965.157, 3955.386, 3954.216, 3965.157, 85700},
    {3957.390, 3960.006, 3957.390, 3962.107, 2970},
    {3960.378, 3966.790, 3960.378, 3966.800, 4600},
    {3966.800, 3972.220, 3965.005, 3972.220, 8110},
    {3972.984, 3974.486, 3969.823, 3981.218, 53100},
    {3974.486, 3968.318, 3964.518, 3974.486, 35000},
    {3968.318, 3968.318, 3968.048, 3968.318, 93900},
    {3968.318, 3961.911, 3961.911, 3978.466, 232000},
    {3964.000, 3964.192, 3958.689, 3967.287, 22400},
    {3967.537, 3967.516, 3965.196, 3970.355, 13800},
    {3967.198, 3962.809, 3962.799, 3967.199, 10800},
    {3965.982, 3971.295, 3965.073, 3971.301, 31000},
    {3969.000, 3964.696, 3964.594, 3970.000, 29900},
    {3968.320, 3966.583, 3965.402, 3970.816, 9310},
    {3966.583, 3969.029, 3966.583, 3976.312, 11900},
    {3971.204, 3974.851, 3971.204, 3976.846, 32600},
    {3973.861, 3977.840, 3969.518, 3977.840, 69500},
    {3977.837, 3977.500, 3974.055, 3980.700, 6819},
    {3977.000, 3975.578, 3974.355, 3981.782, 12854},
    {3978.001, 3976.386, 3968.030, 3980.556, 80276},
    {3965.367, 3967.490, 3964.323, 3971.483, 15561},
    {3965.166, 3968.787, 3962.731, 3969.366, 17323},
    {3965.010, 3966.917, 3961.923, 3968.787, 10907},
    {3962.000, 3977.267, 3958.000, 3977.267, 29847},
    {3977.267, 3985.151, 3971.047, 3986.199, 166004},
};

common::MarketData additionalCandleForSellFalse = {3986.185, 4003.103, 3986.185, 4003.103, 59659};

std::vector<common::MarketData> candlesToBuy = {
    {3965.966, 3968.760, 3965.794, 3969.690, 40000},
    {3966.014, 3962.254, 3957.629, 3966.014, 6710},
    {3965.163, 3966.599, 3965.157, 3967.178, 18300},
    {3965.157, 3955.386, 3954.216, 3965.157, 85700},
    {3957.390, 3960.006, 3957.390, 3962.107, 2970},
    {3960.378, 3966.790, 3960.378, 3966.800, 4600},
    {3966.800, 3972.220, 3965.005, 3972.220, 8110},
    {3972.984, 3974.486, 3969.823, 3981.218, 53100},
    {3974.486, 3968.318, 3964.518, 3974.486, 35000},
    {3968.318, 3968.318, 3968.048, 3968.318, 93900},
    {3968.318, 3961.911, 3961.911, 3978.466, 232000},
    {3964.000, 3964.192, 3958.689, 3967.287, 22400},
    {3967.537, 3967.516, 3965.196, 3970.355, 13800},
    {3967.198, 3962.809, 3962.799, 3967.199, 10800},
    {3965.982, 3971.295, 3965.073, 3971.301, 31000},
    {3969.000, 3964.696, 3964.594, 3970.000, 29900},
    {3968.320, 3966.583, 3965.402, 3970.816, 9310},
    {3966.583, 3969.029, 3966.583, 3976.312, 11900},
    {3971.204, 3974.851, 3971.204, 3976.846, 32600},
    {3973.861, 3977.840, 3969.518, 3977.840, 69500},
    {3977.837, 3977.500, 3974.055, 3980.700, 6819},
    {3977.000, 3975.578, 3974.355, 3981.782, 12854},
    {3978.001, 3976.386, 3968.030, 3980.556, 80276},
    {3965.367, 3967.490, 3964.323, 3971.483, 15561},
    {3965.166, 3968.787, 3962.731, 3969.366, 17323},
    {3965.010, 3966.917, 3961.923, 3968.787, 10907},
    {3962.000, 3977.267, 3958.000, 3977.267, 29847},
    {3977.267, 3985.151, 3971.047, 3986.199, 166004},
    {3986.185, 4003.103, 3986.185, 4003.103, 59659},
    {4003.557, 3999.228, 3997.593, 4015.458, 69379},
    {4004.064, 3996.296, 3995.666, 4007.771, 33918},
    {3997.297, 3999.310, 3993.943, 4002.323, 18573},
    {4003.000, 4001.725, 3996.994, 4003.000, 25596},
    {4000.001, 3986.926, 3986.926, 4000.001, 50952},
    {3990.296, 3991.750, 3988.679, 3994.100, 46801},
    {3993.571, 3980.990, 3979.240, 3993.571, 52045},
    {3980.717, 3978.115, 3978.115, 3986.698, 19444},
    {3985.341, 3942.800, 3942.800, 3985.446, 13512},
};

common::MarketData additionalCandleForBuyTrue = {3942.525, 3957.540, 3940.000, 3959.606, 38330};

std::vector<common::MarketData> emptyMarketData;

double topFirstPoint = 3977.7233801236935;
double middleFirstPoint = 3967.1929499999997;
double bottomFirstPoint = 3956.6625198763059;

}  // namespace unit_test
}  // namespace strategies
}  // namespace auto_trader

#endif  // AUTO_TRADER_BOLLINGER_BANDS_STRATEGY_UT_H
