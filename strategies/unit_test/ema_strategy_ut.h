/*
 * Copyright (c) 2020, Rapprise.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef AUTO_TRADER_EMA_STRATEGY_UT_H
#define AUTO_TRADER_EMA_STRATEGY_UT_H

#include <vector>

#include "common/market_data.h"

namespace auto_trader {
namespace strategies {
namespace unit_test {

std::vector<common::MarketData> emaCandlesToBuy = {
    {22.27, 22.27, 22.27, 22.27, 22.27}, {22.19, 22.19, 22.19, 22.19, 22.19},
    {22.08, 22.08, 22.08, 22.08, 22.08}, {22.17, 22.17, 22.17, 22.17, 22.17},
    {22.18, 22.18, 22.18, 22.18, 22.18}, {22.13, 22.13, 22.13, 22.13, 22.13},
    {22.23, 22.23, 22.23, 22.23, 22.23}, {22.43, 22.43, 22.43, 22.43, 22.43},
    {22.24, 22.24, 22.24, 22.24, 22.24}, {22.29, 22.29, 22.29, 22.29, 22.29},
    {22.15, 22.15, 22.15, 22.15, 22.15}};

std::vector<common::MarketData> emaCandlesToSell = {
    {22.27, 22.27, 22.27, 22.27, 22.27}, {22.19, 22.19, 22.19, 22.19, 22.19},
    {22.08, 22.08, 22.08, 22.08, 22.08}, {22.17, 22.17, 22.17, 22.17, 22.17},
    {22.18, 22.18, 22.18, 22.18, 22.18}, {22.13, 22.13, 22.13, 22.13, 22.13},
    {22.23, 22.23, 22.23, 22.23, 22.23}, {22.43, 22.43, 22.43, 22.43, 22.43},
    {22.24, 22.24, 22.24, 22.24, 22.24}, {22.29, 22.29, 22.29, 22.29, 22.29},
    {22.15, 22.15, 22.15, 22.15, 22.15}, {22.39, 22.39, 22.39, 22.39, 22.39},
    {22.38, 22.38, 22.38, 22.38, 22.38}, {22.61, 22.61, 22.61, 22.61, 22.61},
};

std::vector<common::MarketData> emaCandlesToCheckPoints = {
    {27.25, 27.62, 27.15, 27.73, 1}, {27.63, 27.25, 27.16, 27.65, 1},
    {27.27, 26.74, 26.73, 27.34, 1}, {26.77, 26.69, 26.64, 26.88, 1},
    {26.75, 26.55, 26.46, 26.79, 1}, {26.72, 26.70, 26.56, 26.75, 1},
    {26.65, 26.46, 26.29, 26.98, 1}, {26.49, 26.83, 26.28, 26.93, 1},
    {26.90, 26.89, 26.76, 27.08, 1}, {26.83, 27.21, 26.83, 27.29, 1},
    {27.15, 27.04, 27.01, 27.23, 1}, {27.19, 27.25, 27.06, 27.47, 1},
    {27.10, 27.25, 27.04, 27.29, 1}, {27.30, 27.15, 27.00, 27.45, 1},
    {27.20, 27.61, 27.00, 27.64, 1}, {27.70, 27.63, 27.47, 28.07, 1},
    {27.58, 27.88, 27.39, 28.23, 1}, {28.01, 27.91, 27.76, 28.23, 1},
    {27.82, 28.01, 27.60, 28.13, 1}, {28.01, 27.85, 27.76, 28.19, 1},
    {27.79, 27.45, 27.40, 27.97, 1}, {27.67, 27.93, 27.55, 28.05, 1},
    {27.87, 27.44, 27.42, 28.02, 1}, {27.62, 27.50, 27.36, 27.66, 1},
    {27.38, 27.34, 27.25, 27.54, 1}, {27.35, 27.28, 27.10, 27.39, 1},
    {27.35, 27.55, 27.31, 27.71, 1}, {27.65, 27.86, 27.50, 27.92, 1},
    {27.88, 27.88, 27.75, 28.00, 1}, {27.93, 28.03, 27.88, 28.11, 1},
    {27.92, 28.04, 27.87, 28.06, 1}, {28.04, 28.01, 27.88, 28.16, 1}};

std::vector<common::MarketData> emaCandlesToBuySecond = {
    {3971.071, 3969.291, 3966.290, 3973.686, 24099.9758},
    {3969.291, 3970.000, 3968.820, 3970.000, 6470.23082},
    {3970.000, 3972.312, 3968.691, 3972.313, 7048.35823},
    {3970.150, 3956.232, 3955.934, 3971.999, 32912.1106},
    {3960.235, 3958.017, 3957.781, 3964.449, 27110.5651},
    {3959.544, 3962.526, 3959.544, 3964.704, 13880.0369},
    {3964.704, 3961.500, 3961.500, 3970.560, 18109.5228},
    {3959.573, 3962.087, 3956.363, 3962.665, 14915.0119},
    {3962.087, 3962.539, 3961.724, 3965.715, 9378.30216},
    {3964.921, 3962.493, 3958.891, 3970.050, 45331.8917},
    {3961.316, 3951.064, 3950.000, 3961.316, 21712.1196},
    {3948.000, 3955.000, 3942.870, 3957.276, 90832.2596},
    {3953.967, 3955.000, 3949.538, 3960.000, 48951.9708},
    {3956.999, 3947.642, 3942.279, 3957.000, 67125.1568},
    {3948.263, 3945.138, 3944.017, 3950.617, 41531.9718},
    {3945.135, 3930.038, 3928.734, 3948.578, 72730.1814},
    {3928.734, 3893.133, 3884.284, 3930.038, 215172.114},
    {3894.116, 3896.078, 3859.835, 3899.135, 235435.255},
    {3896.078, 3898.890, 3894.228, 3901.917, 37567.9105},
    {3898.891, 3878.521, 3874.525, 3900.000, 62778.5736},
    {3881.718, 3884.495, 3876.500, 3890.544, 86095.0338},
    {3890.542, 3884.930, 3881.450, 3890.543, 43417.3731},
    {3886.251, 3883.344, 3882.851, 3888.064, 24584.0170},
    {3886.880, 3892.469, 3885.000, 3895.060, 159301.468},
    {3889.056, 3904.000, 3889.056, 3906.192, 90372.4564}};

std::vector<common::MarketData> emaCandlesToSellSecond = {
    {3890.542, 3884.930, 3881.450, 3890.543, 43417.373},
    {3886.251, 3883.344, 3882.851, 3888.064, 24584.017},
    {3886.880, 3892.469, 3885.000, 3895.060, 159301.46},
    {3889.056, 3904.000, 3889.056, 3906.192, 90372.456},
    {3906.458, 3914.707, 3904.001, 3914.707, 28777.793},
    {3913.203, 3910.230, 3904.000, 3913.716, 45999.914},
    {3906.401, 3913.000, 3905.770, 3915.000, 45427.626},
    {3914.980, 3905.884, 3905.884, 3915.600, 23409.183},
    {3905.889, 3913.389, 3905.883, 3913.389, 32718.663},
    {3914.281, 3914.020, 3911.888, 3916.377, 13226.898},
    {3913.856, 3916.694, 3911.520, 3917.013, 65189.965},
    {3916.937, 3919.904, 3916.937, 3920.000, 166496.90},
    {3918.834, 3920.339, 3918.834, 3921.840, 40500.210},
    {3918.959, 3911.957, 3910.000, 3921.518, 42469.131},
    {3912.562, 3912.708, 3910.595, 3916.680, 14783.389},
    {3915.569, 3912.708, 3912.708, 3915.720, 8831.8251},
    {3914.049, 3914.999, 3914.049, 3915.000, 15306.562},
    {3914.529, 3908.757, 3908.678, 3914.999, 16026.651},
    {3913.213, 3905.078, 3905.078, 3913.213, 83732.977}};

std::vector<common::MarketData> emaFiveCandles = {
    {6581.000, 6506.870, 6450.0, 6581.000, 824.000},
    {6502.885, 6145.360, 6049.999, 6502.885, 2610.000},
    {6120.000, 6200.889, 6050.000, 6242.660, 2150.000},
    {6190.000, 6186.000, 6170.042, 6238.590, 611.000},
    {6186.000, 6205.000, 6178.560, 6249.559, 133.000},
};

std::vector<common::MarketData> emaEmptyMarketData;

}  // namespace unit_test
}  // namespace strategies
}  // namespace auto_trader

#endif  // AUTO_TRADER_EMA_STRATEGY_UT_H
